// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createApiErrorLog = `-- name: CreateApiErrorLog :execresult
INSERT INTO api_error_log (
    error_message,
    timestamp
) VALUES (
    ?, ?
)
`

type CreateApiErrorLogParams struct {
	ErrorMessage string
	Timestamp    time.Time
}

func (q *Queries) CreateApiErrorLog(ctx context.Context, arg CreateApiErrorLogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createApiErrorLog, arg.ErrorMessage, arg.Timestamp)
}

const deleteApiErrorLog = `-- name: DeleteApiErrorLog :exec
DELETE FROM api_error_log WHERE error_id = ?
`

func (q *Queries) DeleteApiErrorLog(ctx context.Context, errorID int64) error {
	_, err := q.db.ExecContext(ctx, deleteApiErrorLog, errorID)
	return err
}

const getApiErrorLog = `-- name: GetApiErrorLog :one
SELECT error_id, timestamp, error_message FROM api_error_log WHERE error_id = ? LIMIT 1
`

func (q *Queries) GetApiErrorLog(ctx context.Context, errorID int64) (ApiErrorLog, error) {
	row := q.db.QueryRowContext(ctx, getApiErrorLog, errorID)
	var i ApiErrorLog
	err := row.Scan(&i.ErrorID, &i.Timestamp, &i.ErrorMessage)
	return i, err
}

const listApiErrorLogs = `-- name: ListApiErrorLogs :many
SELECT error_id, timestamp, error_message FROM api_error_log ORDER BY id
`

func (q *Queries) ListApiErrorLogs(ctx context.Context) ([]ApiErrorLog, error) {
	rows, err := q.db.QueryContext(ctx, listApiErrorLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiErrorLog
	for rows.Next() {
		var i ApiErrorLog
		if err := rows.Scan(&i.ErrorID, &i.Timestamp, &i.ErrorMessage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
